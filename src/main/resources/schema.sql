-- use paymentprocess;
DROP VIEW IF EXISTS PENDING_ORDERS;
DROP TABLE IF EXISTS PAYMENT_RECORD;
DROP TABLE IF EXISTS ORDERS;
DROP TABLE IF EXISTS PAYMENT_METHOD;
DROP TABLE IF EXISTS CLIENT;

CREATE TABLE CLIENT (
CLIENT_ID INTEGER NOT NULL PRIMARY KEY,
CLIENT_NAME VARCHAR(20) NOT NULL,
VIOLATOR BOOLEAN DEFAULT FALSE,
CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATED TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE PAYMENT_METHOD(
PAYMENT_METHOD_ID INTEGER NOT NULL PRIMARY KEY,
ENCRYPTED_CREDIT_CARD VARCHAR(100) NOT NULL,
ADDRESS VARCHAR(100),
STATUS ENUM('ACTIVE','INACTIVE'),
CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATED TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE ORDERS(
ORDER_ID INTEGER NOT NULL PRIMARY KEY,
CLIENT_ID INTEGER,
PAYMENT_METHOD_ID INTEGER,
TOTAL_AMOUNT DECIMAL(13, 2),
ENCRYPTED_AUTHCODE VARCHAR(100) unique,
CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATED TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID),
FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(PAYMENT_METHOD_ID)
);

CREATE TABLE PAYMENT_RECORD(
PAYMENT_RECORD_ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
ORDER_ID  INTEGER,
STATUS ENUM('ACTIVE','SUCCESS', 'FAIL', 'DECLINE'),
PROCESS_DATETIME TIMESTAMP,
CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATED TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
);

CREATE VIEW PENDING_ORDERS AS
SELECT ORDERS.ORDER_ID,ORDERS.CLIENT_ID AS ORDERS_CLIENT_ID,PAYMENT_RECORD_ID,
PAYMENT_METHOD.STATUS AS PAYMENT_METHOD_STATUS,PAYMENT_RECORD.STATUS AS PAYMENT_RECORD_STATUS, PAYMENT_RECORD.PROCESS_DATETIME AS PAYMENT_RECORD_PROCESS_DATETIME,
PAYMENT_METHOD.ADDRESS FROM ORDERS
INNER JOIN PAYMENT_METHOD ON ORDERS.PAYMENT_METHOD_ID = PAYMENT_METHOD.PAYMENT_METHOD_ID
INNER JOIN CLIENT ON CLIENT.CLIENT_ID= ORDERS.CLIENT_ID AND CLIENT.VIOLATOR = FALSE
LEFT JOIN PAYMENT_RECORD ON ORDERS.ORDER_ID = PAYMENT_RECORD.ORDER_ID


